{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/67-error-handling-in-go-neat-and-clean-way/",
    "result": {"data":{"site":{"siteMetadata":{"title":"satriahrh"}},"markdownRemark":{"id":"9cdc062e-c73f-553a-8122-f76998a0e73d","excerpt":"I expect you were wondering about doing a throw – try – catch like we used to do in Java, or raise – except like we used to do in Ruby, or other likely error…","html":"<p>I expect you were wondering about doing a <code>throw</code> – <code>try</code> – <code>catch</code> like we used to do in Java, or <code>raise</code> – <code>except</code> like we used to do in Ruby, or other likely error handling strategy in other languages. But I have to tell you, first of all, those kinds of strategies are not the way of error handling in Go. So you will be getting a new error handling strategy that is completely different from other languages we used to do.</p>\n<p>In this article, I will provide you with three error handling that can be done in Go. The first strategy is applying <code>panic</code> – <code>recover</code> which is very similar with the error handling strategy in other languages. Second, I will introduce to you of writing a go function that have at least returning one value of <code>error</code>. Finally, learning from the second strategy, I will provide you a neat and clean way on handling error in Go.</p>\n<h2>Don’t do this in Go unless you have to</h2>\n<p>Take an example in Java. When you call a method, any method, you do not expect it to throw an error. You just expect it to the way it is.</p>\n<p>This kind of thing wasn’t told for beginners who just learned Java. I am the one who pretty late figuring what error handle means in Java. Catching an error using <code>catch</code> the statement doesn’t make sense to me.</p>\n<p>This is pretty common in Java, so I lend some rows of code in Java demonstrating error handling from <a href=\"https://www.javatpoint.com/exception-handling-in-java\">JavaTPoint</a>.</p>\n<pre><code>&#x3C;pre class=\"wp-block-code\">```\npublic class JavaExceptionExample{  \n  public static void main(String args[]){  \n    try{  \n      //code that may raise exception  \n      int data=100/0;  \n    }catch(ArithmeticException e){\n      System.out.println(e);}  \n      //rest code of the program   \n   System.out.println(\"rest of the code...\");  \n  }  \n}  \n</code></pre>\n<pre><code>\nIn go, you could do the same. But this is very uncommon. I even rarely see in Go tutorials using this methods:\n\n</code></pre>\n<pre class=\"wp-block-code\">```\nfunc main() {\n  doSomeOperation()\n  if r := recover(); r != nil {\n    fmt.Println(\"Recovered: \", r) \n  }\n}\n```\n```\n\nOr it can be done this way to support multiple operation\n\n```\n<pre class=\"wp-block-code\">```\nfunc main() {\n  defer func() {\n    if r := recover(); r != nil {\n      fmt.Println(\"Recovered: \", r) \n    }\n  }()\n  doSomeOperation()\n  doAnotherOperation()\n}\n```\n```\n\nA function that at least return an error\n----------------------------------------\n\nIf you just started Go, you might found this likely error handling.\n\n```\n<pre class=\"wp-block-code\">```\nfunc doSomething(action string) error {\n  if action == \"\" {\n    return fmt.Errorf(\"blank action error\")\n  }\n  fmt.Println(action)\n  return nil\n}\n```\n```\n\nObserve that `doSomething(string) error` is a function that return an `error`. Refer to [a section from Effective Go](https://golang.org/doc/effective_go#errors), the function can be in a form of multivalued return function with `error` at the end.\n\nWe can call `doSomething(string) error` as follow. Observe that we expect a value to be returned from the function. If the function do catch an error, the value of `err` should be `nil`.\n\n```\n<pre class=\"wp-block-code\">```\nfunc main() {\n  err := doSomething(\"run\")\n  if err != nil {\n    fmt.Printf(\"Found an error: %v\\n\", err)\n  } else {\n    fmt.Println(\"Succeed\")\n  }\n}\n```\n```\n\nThis is the desired way of error handling in Go.\n\nDon’t just return an error, handle it\n-------------------------------------\n\nNow that you know the desired way of handling an error in Go, things will get complicated as your codebase grows larger. This is quite a problem in the Go community, even it is mentioned in the documentation of `pkg/error`.\n\nLet say that your Go application builds on some layers, which is very common. The problem with traditional error handling in Go is that we want an error message that needs to return to the user, but in which layer we should define the error message for the user?\n\nThe idea is **do not trust anyone outside, trust anyone inside**.\n\nObserve the following code satisfying the idea. I also put a comment on some line to be able for you understand the idea.\n\n```\n<pre class=\"wp-block-code\">```\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\n\nfunc main() {\n  rawData := `{\"info\": \"this is the info\"}`\n  err := PrintInfo(rawData)\n  if err != nil {\n    // this is where the error will be given to the user\n    fmt.Println(\"Error printing current hostname with following error: %v\", err)\n  }\n}\n\ntype Data struct {\n  Info string\n}\n\nfunc PrintInfo(raw string) error {\n  data, err := GetData(raw)\n  if err != nil {\n    // this line return the error right away\n    //   because she trust anyone from inside\n    return err\n  }\n  fmt.Println(data.Info)\n  return nil\n}\n\nfunc GetData(raw string) (Data, error) {\n  data := Data{}\n  err := json.Unmarshal([]byte(raw), &data)\n  if err != nil {\n    // this line don't return the given error from json.Unmarshal\n    //  instead, she create their customized error\n    //  because she don't trust anyone outside\n    return Data{}, fmt.Errorf(\"cannot parse the data\")\n  }\n  return data, nil\n}\n\n```\n```\n\nSee? It is much better than customizing all error or returning all the error right away.\n\nEnding\n------\n\nThat’s all I have. What do you think of it? Tell your friend about this, let them know how I handle error in Go so we can discuss further. And let me know your thought on a comment or any. Thanks.","frontmatter":{"title":"Error Handling in Go: Neat and Clean Way","date":"March 12, 2021","description":null}},"previous":{"fields":{"slug":"/blog/70-perfect-quality-of-software-is-impossible/"},"frontmatter":{"title":"Perfect Quality of Software is Impossible"}},"next":{"fields":{"slug":"/blog/80-pengalaman-punya-kindle-paperwhite/"},"frontmatter":{"title":"Pengalaman Punya Kindle Paperwhite"}}},"pageContext":{"id":"9cdc062e-c73f-553a-8122-f76998a0e73d","previousPostId":"383fde72-9905-5be6-a2e3-ea465df317f6","nextPostId":"597ab0a6-5b5e-591d-a840-c03a1f30a596"}},
    "staticQueryHashes": ["2841359383"]}